`configure' configures GNU C Library (see version.h) to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
			  [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
			  [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR           user executables [EPREFIX/bin]
  --sbindir=DIR          system admin executables [EPREFIX/sbin]
  --libexecdir=DIR       program executables [EPREFIX/libexec]
  --datadir=DIR          read-only architecture-independent data [PREFIX/share]
  --sysconfdir=DIR       read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR   modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR    modifiable single-machine data [PREFIX/var]
  --libdir=DIR           object code libraries [EPREFIX/lib]
  --includedir=DIR       C header files [PREFIX/include]
  --oldincludedir=DIR    C header files for non-gcc [/usr/include]
  --infodir=DIR          info documentation [PREFIX/info]
  --mandir=DIR           man documentation [PREFIX/man]

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]

Optional Features:
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-sanity-checks really do not use threads (should not be used except
                          in special situations) [default=yes]
  --enable-check-abi      do "make check-abi" in "make check" (no/warn/yes)
                          [default=no]
  --enable-shared         build shared library [default=yes if GNU ld &
                          ELF]
  --enable-profile        build profiled library [default=yes]
  --enable-omitfp         build undebuggable optimized library
                          [default=no]
  --enable-bounded        build with runtime bounds checking
                          [default=no]
  --disable-versioning    do not include versioning information in the library
                          objects [default=yes if supported]
  --enable-oldest-abi=ABI configure the oldest ABI supported [e.g. 2.2]
                          [default=glibc default]
  --enable-add-ons[=DIRS...]
                          configure and build add-ons in DIR1,DIR2,... search
                          for add-ons if no parameter given
  --disable-hidden-plt    do not hide internal function calls to avoid PLT
  --enable-bind-now       disable lazy relocations in DSOs
  --enable-static-nss     build static NSS modules [default=no]
  --disable-force-install don't force installation of files from this package,
                          even if they are older than the installed files
  --enable-kernel=VERSION compile for compatibility with kernel not older than
                          VERSION
  --enable-all-warnings   enable all useful warnings gcc can issue

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-gmp=DIRECTORY    find GMP source code in DIRECTORY (not needed)
  --with-gd=DIR           find libgd include dir and library with prefix DIR
  --with-gd-include=DIR   find libgd include files in DIR
  --with-gd-lib=DIR       find libgd library files in DIR
  --with-fp               if using floating-point hardware [default=yes]
  --with-binutils=PATH    specify location of binutils (as and ld)
  --with-elf              if using the ELF object format
  --with-selinux          if building with SELinux support
  --with-xcoff            if using the XCOFF object format
  --without-cvs           if CVS should not be used
  --with-headers=PATH     location of system headers to use (for example
                          /usr/src/linux/include) [default=compiler
                          default]
  --with-tls              enable support for TLS
  --without-__thread      do not use TLS features even when supporting them

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  CPPFLAGS    C/C++ preprocessor flags, e.g. -I<include dir> if you have
              headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <glibc>.
